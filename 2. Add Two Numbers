You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself. 
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
//Java solution using ListNode class in collection 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode t=new ListNode(0);//initial 0 is passed
        ListNode d=t;//points to t
        //to store the carry value 6+4=10 in which 0 is printed and 1 is carried
        int ca=0; //[2,4,3] [5,6,4] []- answer list empty
        while(l1!=null ||l2!=null||ca!=0){
            int sum=ca;
            if(l1!=null){ 
                sum=sum+l1.val;  //sum=0+2 
                //after adding move to next node
                l1=l1.next;

            }if(l2!=null){
                sum=sum+l2.val;//sum=2+5=7
                l2=l2.next;
            }
            d.next=new ListNode(sum%10); //7%10=7
            ca=sum/10; //7/10
            d=d.next;
        }return t.next;
        //sum=0+2+5 = 7%10=7
        //sum=0+4+6=10// 10%10 = 0 // ca=10/10=1 
        //sum=1+3+4 = 8 //8%10=8 
    }
}
